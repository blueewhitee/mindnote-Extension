var content=function(){"use strict";var F=Object.defineProperty;var A=(l,o,i)=>o in l?F(l,o,{enumerable:!0,configurable:!0,writable:!0,value:i}):l[o]=i;var c=(l,o,i)=>A(l,typeof o!="symbol"?o+"":o,i);var w,S;function l(n){return n}const i=(S=(w=globalThis.browser)==null?void 0:w.runtime)!=null&&S.id?globalThis.browser:globalThis.chrome,p={matches:["<all_urls>"],main(){console.log("MindNotes content script loaded"),i.runtime.onMessage.addListener((n,t,e)=>{if(n.action==="extractContent"){try{const s=(document.querySelector("article")||document.body).innerText.replace(/\s+/g," ").trim().substring(0,1e4);e({success:!0,content:s})}catch(r){console.error("Error extracting content:",r),e({success:!1,error:"Failed to extract content"})}return!0}})}};function u(n,...t){}const I={debug:(...n)=>u(console.debug,...n),log:(...n)=>u(console.log,...n),warn:(...n)=>u(console.warn,...n),error:(...n)=>u(console.error,...n)},g=class g extends Event{constructor(t,e){super(g.EVENT_NAME,{}),this.newUrl=t,this.oldUrl=e}};c(g,"EVENT_NAME",v("wxt:locationchange"));let m=g;function v(n){var t;return`${(t=i==null?void 0:i.runtime)==null?void 0:t.id}:content:${n}`}function T(n){let t,e;return{run(){t==null&&(e=new URL(location.href),t=n.setInterval(()=>{let r=new URL(location.href);r.href!==e.href&&(window.dispatchEvent(new m(r,e)),e=r)},1e3))}}}const d=class d{constructor(t,e){c(this,"isTopFrame",window.self===window.top);c(this,"abortController");c(this,"locationWatcher",T(this));c(this,"receivedMessageIds",new Set);this.contentScriptName=t,this.options=e,this.abortController=new AbortController,this.isTopFrame?(this.listenForNewerScripts({ignoreFirstEvent:!0}),this.stopOldScripts()):this.listenForNewerScripts()}get signal(){return this.abortController.signal}abort(t){return this.abortController.abort(t)}get isInvalid(){return i.runtime.id==null&&this.notifyInvalidated(),this.signal.aborted}get isValid(){return!this.isInvalid}onInvalidated(t){return this.signal.addEventListener("abort",t),()=>this.signal.removeEventListener("abort",t)}block(){return new Promise(()=>{})}setInterval(t,e){const r=setInterval(()=>{this.isValid&&t()},e);return this.onInvalidated(()=>clearInterval(r)),r}setTimeout(t,e){const r=setTimeout(()=>{this.isValid&&t()},e);return this.onInvalidated(()=>clearTimeout(r)),r}requestAnimationFrame(t){const e=requestAnimationFrame((...r)=>{this.isValid&&t(...r)});return this.onInvalidated(()=>cancelAnimationFrame(e)),e}requestIdleCallback(t,e){const r=requestIdleCallback((...s)=>{this.signal.aborted||t(...s)},e);return this.onInvalidated(()=>cancelIdleCallback(r)),r}addEventListener(t,e,r,s){var a;e==="wxt:locationchange"&&this.isValid&&this.locationWatcher.run(),(a=t.addEventListener)==null||a.call(t,e.startsWith("wxt:")?v(e):e,r,{...s,signal:this.signal})}notifyInvalidated(){this.abort("Content script context invalidated"),I.debug(`Content script "${this.contentScriptName}" context invalidated`)}stopOldScripts(){window.postMessage({type:d.SCRIPT_STARTED_MESSAGE_TYPE,contentScriptName:this.contentScriptName,messageId:Math.random().toString(36).slice(2)},"*")}verifyScriptStartedEvent(t){var a,E,b;const e=((a=t.data)==null?void 0:a.type)===d.SCRIPT_STARTED_MESSAGE_TYPE,r=((E=t.data)==null?void 0:E.contentScriptName)===this.contentScriptName,s=!this.receivedMessageIds.has((b=t.data)==null?void 0:b.messageId);return e&&r&&s}listenForNewerScripts(t){let e=!0;const r=s=>{if(this.verifyScriptStartedEvent(s)){this.receivedMessageIds.add(s.data.messageId);const a=e;if(e=!1,a&&(t!=null&&t.ignoreFirstEvent))return;this.notifyInvalidated()}};addEventListener("message",r),this.onInvalidated(()=>removeEventListener("message",r))}};c(d,"SCRIPT_STARTED_MESSAGE_TYPE",v("wxt:content-script-started"));let f=d;function M(){}function h(n,...t){}const N={debug:(...n)=>h(console.debug,...n),log:(...n)=>h(console.log,...n),warn:(...n)=>h(console.warn,...n),error:(...n)=>h(console.error,...n)};return(async()=>{try{const{main:n,...t}=p,e=new f("content",t);return await n(e)}catch(n){throw N.error('The content script "content" crashed on startup!',n),n}})()}();
content;
